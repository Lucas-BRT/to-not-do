name: Build and Release

on:
  push:
    tags:
      - v*

jobs:
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    steps:
      # Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Instalação do Rust e setup do cache
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Rodando o linter (clippy)
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Compilando o projeto
      - name: Build the project
        run: cargo build --release

      # Empacotando os binários
      - name: Archive build artifacts
        run: |
          mkdir artifacts
          cp target/release/* artifacts/
        id: artifacts

  release:
    name: Create Draft Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Criação do draft de release
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: true

      # Upload dos binários para o draft release
      - name: Upload Artifacts to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: artifacts-${{ github.ref_name }}.zip
          asset_content_type: application/zip
